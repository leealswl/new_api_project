<!-- main.html -->
   <section class="container mt-4" id="game-sys">
      <div id="Carousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner" id="game-list">
          <div class="carousel-item active">
            <div class="d-flex justify-content-around">
              <div class="game-card" draggable="true">
                <img src="https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS8uQKge0a8wwRcJMBA_ZdDtHoQRxzZCSjSl-elWwqxsEz4oeD5LFa4ihF56y2S7DWtUiLXfRQeI7NNseTOVfRbodDJCt0VWAiKIn5gZg" class="img-fluid game-thumbnail">
                <p class="mt-2">Game Title 1</p>
              </div>
            </div>
          </div>
        </div>
          JavaScript 동적
        <button class="carousel-control-prev" type="button" data-bs-target="#Carousel" data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">이전</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#Carousel" data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">다음</span>
        </button>
      </div>
    </section>
<!-- 캐러셀 css -->
    .carousel {
        max-width: 1500px;
        margin: 0 auto;
    }
    .carousel-inner {
      overflow: hidden;
    }
    
    /* 슬라이드 내부 flex 컨테이너: 카드 5개가 균등하게 분포 */
    .carousel-item > .d-flex {
      width: 100%;
      display: flex;
      justify-content: space-evenly;
    }


    <!-- js -->
    // const render = () => {
      //   const chunks = chunkArray(gameList, 5);
      //   const gameHTML = chunks.map((chunk, index) => `
      //     <div class="carousel-item ${index === 0 ? "active" : ""}">
      //       <div class="d-flex justify-content-around">
      //         ${chunk.map((item) => `
      //         <div class="game-card" draggable="true">
      //             <img src="${item.background_image}" class="img-fluid game-thumbnail">
      //             <p class="mt-2">${item.name}</p>
      //           </div>`).join("")}
      //       </div>
      //     </div>
      //   `).join("");

    //   document.getElementById("game-list").innerHTML = gameHTML;
    //   // 드래그로직
    // const gameCards = document.querySelectorAll('.game-card');
    // gameCards.forEach(card => {
    //   card.addEventListener('dragstart', (event) => {
    //     // 드래그할 때 카드의 HTML을 dataTransfer에 저장
    //     event.dataTransfer.setData('text/html', card.outerHTML);
    //   });
    // });
    // };
    // document.addEventListener('DOMContentLoaded', () => {
    //   const dropZone = document.getElementById('drop-zone');
    //   dropZone.addEventListener('dragover', (event) => {
    //     event.preventDefault();
    //     dropZone.classList.add('drop-zone-active');
    //   });
    //   dropZone.addEventListener('dragleave', () => {
    //     dropZone.classList.remove('drop-zone-active');
    //   });
    
    //   dropZone.addEventListener('drop', (event) => {
    //     event.preventDefault();
    //     dropZone.classList.remove('drop-zone-active');
    //     // 저장된 게임 카드 HTML을 가져와서 dropZone에 추가
    //     const gameCardHTML = event.dataTransfer.getData('text/html');
    //     // 만약 기존 내용이 있다면 초기화 후 추가하거나 append 처리
    //     dropZone.innerHTML += gameCardHTML;
    //   });
    // });



    ----------스크린샷 여러개
    let gameList = [];

const news = async () => {
  const url = new URL(`https://api.rawg.io/api/games?key=9487a4535e60442eb301ed9ec7f83dfa`);
  let response = await fetch(url);
  let data = await response.json();
  gameList = data.results.filter(game =>
    game.genres && game.genres.some(genre => genre.name === "Action")
  );
  console.log("Filtered Action games:", gameList);
  
  // 예시로 필터링된 게임 목록에서 첫 번째 게임을 사용
  if(gameList.length > 0) {
    document.getElementById('news-board').innerHTML = renderScreenshots(gameList[0]);
  } else {
    document.getElementById('news-board').innerHTML = '<p>No Action games found.</p>';
  }
};

news();

function renderScreenshots(game) {
  // game 객체에 short_screenshots가 있는지 확인
  if (!game.short_screenshots || game.short_screenshots.length === 0) {
    return '<p>No screenshots available.</p>';
  }
  
  // 각 스크린샷을 <img> 태그로 변환하여 반환 (예: 슬라이더 또는 그리드 형태로 표시 가능)
  return game.short_screenshots.map(screenshot => {
    return `<img src="${screenshot.image}" alt="Screenshot" class="screenshot">`;
  }).join('');
}



